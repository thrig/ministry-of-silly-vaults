#!/usr/bin/env perl
#
# Field of View (FOV) via raycast

use 5.24.0;
use warnings;
use Data::Dumper;
use Game::RaycastFOV qw(circle raycast swing_circle);
use Math::Trig qw(:pi deg2rad rad2deg);
use lib '.';
use Misc;

our $MAX_X = 78;
our $MAX_Y = 23;

# center
my $x = 60;
my $y = 12;

*STDOUT->autoflush(1);
print clear_screen, t_norm;

# some random fill in a map to restrict FOV with
my @map;
for my $r (0 .. 23) {
    for my $c (0 .. 40) {
        my $ch = rand() > 0.5 ? '#' : '.';
        $map[$r][$c] = $ch;
        $map[$r][ $c + 40 ] = $ch;
    }
}

open my $fh, '>', 'log' or die "could not write 'log': $!\n";
$fh->autoflush(1);
sub logit { say $fh "@_" }

# radius => div (via `raycast` encircle calculation)
my $div    = 64;
my $radius = 7;

$map[$y][$x] = '@';

# or instead try the similar but maybe different \&circle (which MUST
# NOT be passed the pi2/$div that swing_circle needs)
my $cfn = \&swing_circle;
my %plotted;
raycast(
    $cfn, sub {
        my ($lx, $ly) = @_;
        return -1 if $lx < 0 or $lx >= $MAX_X or $ly < 0 or $ly >= $MAX_Y;
        my $ch = $map[$ly][$lx];
        print at($lx, $ly), $ch unless $plotted{ $lx . ',' . $ly }++;
        return -1 if $ch eq '#';
    }, $x, $y, $radius, pi2 / $div
);

$x = 20;
$map[$y][$x] = '@';

%plotted = ();
raycast(
    $cfn, sub {
        my ($lx, $ly) = @_;
        return -1 if $lx < 0 or $lx >= $MAX_X or $ly < 0 or $ly >= $MAX_Y;
        my $ch = $map[$ly][$lx];
        print at($lx, $ly), $ch unless $plotted{ $lx . ',' . $ly }++;
        return 1;
    }, $x, $y, $radius, pi2 / $div
);

print at(0, $MAX_Y);
